// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

namespace syncFileSystem {
  dictionary StorageInfo {
    long usage_bytes;
    long quota_bytes;
  };
  
  dictionary SyncState {
    DOMString service_name;  // i.e. ‘drive’
    SyncStateStatus state;
    DOMString description;
  };
  
  enum SyncStateStatus {
    // The sync service is being initialized (e.g. restoring data from the
    // database, checking connectivity and authenticating to the service etc).
    INITIALIZING,

    // The sync service is up and running.
    RUNNING,

    // The sync service is not synchronizing files because the remote service
    // needs to be authenticated by the user to proceed.
    AUTHENTICATION_REQUIRED,

    // The sync service is not synchronizing files because the remote service
    // is (temporarily) unavailable due to some recoverable errors, e.g.
    // network is offline, the remote service is down or not
    // reachable etc. More details should be given by |description| parameter
    // in OnSyncStateUpdated (which could contain service-specific details).
    TEMPORARY_UNAVAILABLE,

    // The sync service is disabled and the content will never sync.
    // (E.g. this could happen when the user has no account on
    // the remote service or the sync service has had an unrecoverable
    // error.)
    DISABLED
  };

  // [nodoc] A callback type for requestFileSystem.
  callback GetFileSystemCallback =
      void ([instanceOf=DOMFileSystem] object fileSystem);
      
  // [nodoc] A callback type for getUsageAndQuota.
  callback QuotaAndUsageCallback = void (StorageInfo info);

  // Returns true if operation was successful.  
  callback DeleteFileSystemCallback = void (boolean result);

  interface Functions {
    // Get a sync file system backed by |serviceName|.
    // Calling this multiple times from the same app with the same |serviceName|
    // will return the same handle to the same file system.
    static void requestFileSystem(DOMString serviceName,
                                  GetFileSystemCallback callback);
                                  
    // Get usage and quota in bytes for sync file system with |serviceName|.
    static void getUsageAndQuota([instanceOf=DOMFileSystem] object fileSystem,
                                 QuotaAndUsageCallback callback);
                                 
    // Deletes everything in the syncable filesystem.
    static void deleteFileSystem([instanceOf=DOMFileSystem] object fileSystem,
                                  DeleteFileSystemCallback callback);
  };
  
  interface Events {
    // Fired when an error or other state change has happened in the
    // sync backend.  (E.g. the sync is temporarily disabled due to
    // network or authentication error etc)
    static void onSyncStateChanged(SyncState detail);
  };
};
